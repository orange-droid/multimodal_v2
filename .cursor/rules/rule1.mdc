---
description: 
globs: 
alwaysApply: true
---
# **Cursor Rules 通用规则**

## **规则 0：全局指令与预设**

*   **0.1 沟通语言：**
    *   所有与用户的交互和回复都必须使用中文。
    *   所有代码的输出都应该是英文（包括图表）。
*   **0.2 PowerShell 命令使用规范：**
    *   创建文件夹命令：`New-Item -ItemType Directory -Path "目标文件夹路径"`
    *   创建空文件命令：`New-Item -ItemType File -Path "目标文件路径/文件名.后缀"`
    *   复制文件命令：`Copy-Item -Path "源文件路径" -Destination "目标文件路径"`
    *   **注意：** PowerShell 中不直接支持 `&&` 链接符。每个命令应独立执行，或使用 PowerShell 特有的管道 `|` 或分号 `;` (在适用情况下) 进行链接。
*   **0.3 修改前备份规则（"copy"文件夹机制）：**
    1.  在对任何现有代码文件进行修改或生成新代码覆盖旧代码之前，必须执行以下操作。
    2.  检查项目根目录下是否存在名为 `copy` 的文件夹。
    3.  如果 `copy` 文件夹不存在，则使用命令 `New-Item -ItemType Directory -Path "copy"` 创建它。
    4.  将被修改的原始文件完整复制到 `copy` 文件夹中。例如，若要修改 `src/app.js`，则执行 `Copy-Item -Path "src/app.js" -Destination "copy/app.js"` (文件名保持一致，路径信息可选保留或扁平化存储在copy文件夹内，建议扁平化以简化)。
*   **0.4 `README.md` 的核心地位：**
    *   `README.md` 文件是项目分析、技术选型、页面规划、技术实现细节和开发状态的核心载体，必须在各个开发环节中保持其内容的准确性和最新状态。

## **规则 1：项目初始化（`README.md` 的创建与引导）**

*   **1.1 触发条件：**
    *   当 AI 助手开始处理一个新项目，或在当前项目目录中未检测到 `README.md` 文件时，此规则被激活。
*   **1.2 核心行动原则：**
    1.  **主动询问用户项目基本信息**：在创建任何文件之前，首先与用户沟通，了解项目概况。
    2.  **"先不要生成代码"**：在获取项目基本信息并创建初步的 `README.md` 规划之前，AI 助手不应生成任何具体的业务逻辑或模块代码。
*   **1.3 创建并填充 `README.md`：**
    1.  **收集项目信息**：通过与用户对话，获取以下信息：
        *   项目要创建什么内容（项目类型，例如：一个数据分析工具、一个API服务、一个桌面应用等）。
        *   项目将使用的主要编程语言（例如：Python, JavaScript, Java, C#等）。
        *   项目的核心功能或主要内容概述。
    2.  使用命令 `New-Item -ItemType File -Path "README.md"` 在项目根目录创建 `README.md` 文件。
    3.  根据收集到的信息，向 `README.md` 文件中写入以下结构化内容（AI 应根据用户输入填充括号中的示例内容，并可根据项目类型调整章节）：
        ```markdown
        # [项目名称] 
        (例如：客户关系管理CLI工具)

        ## 项目概括
        (AI将根据用户描述填写，例如：本项目旨在开发一个基于[用户指定的语言，如Python]的命令行工具，用于管理客户信息、记录交互并生成报告。)

        ## 技术选型
        (AI将根据用户指定的编程语言和项目类型填写，例如：
        - 主要编程语言: [用户指定的语言，如 Python 3.10+]
        - 关键库/框架: [例如 Click (用于CLI), Pandas (数据处理), SQLAlchemy (数据库交互) (对于Python项目) / Node.js, Express (对于API服务)]
        - 数据存储: [根据项目需求选择，如 SQLite, JSON文件, PostgreSQL]
        - 版本控制: Git
        - 其他工具: [例如 Pytest (测试), Docker (容器化)])

        ## 项目结构 / 模块划分
        (AI将根据项目类型和用户输入规划，例如：
        - `/[项目主文件夹名]/`: 核心逻辑代码
          - `/cli`: 命令行接口处理模块
          - `/core`: 核心业务逻辑模块 (如客户管理、交互记录)
          - `/db`: 数据库交互模块
          - `/utils`: 工具类和辅助函数
        - `/data`: 用户数据存储目录 (例如SQLite数据库文件)
        - `/tests`: 测试代码
        - `main.py` 或 `app.js`: 程序入口点)

        ## 核心功能 / 模块详解
        (AI将根据用户描述的核心功能列出，例如：
        - `add_contact`: 添加新客户联系人功能
        - `log_interaction`: 记录与客户的交互
        - `generate_report`: 生成客户活动报告
        - `search_contact`: 搜索客户信息)

        ## 数据模型 (如果适用)
        (例如：
        - Customer: { id, name, email, phone, company }
        - Interaction: { id, customer_id, date, type, notes })

        ## 技术实现细节
        [本部分初始为空。在后续开发每一个模块/功能时，AI 会自动将该模块/功能的技术实现方案、关键代码片段说明等填充至此。]

        ## 开发状态跟踪
        [AI 将根据"核心功能 / 模块详解"自动生成下表的初始行，并在开发过程中实时更新各模块/功能的状态。]
        | 模块/功能        | 状态     | 负责人 | 计划完成日期 | 实际完成日期 | 备注         |
        |------------------|----------|--------|--------------|--------------|--------------|
        | [模块1名称]      | 未开始   | AI     | YYYY-MM-DD   |              |              |
        | [模块2名称]      | 未开始   | AI     | YYYY-MM-DD   |              |              |
        | ...              | ...      | ...    | ...          | ...          | ...          |

        ## 代码检查与问题记录
        [本部分用于记录代码检查结果和开发过程中遇到的问题及其解决方案。]

        ## ......
        [可根据项目需要添加其他章节，如部署指南、使用说明等。]
        ```
*   **1.4 用户交互与引导：**
    1.  在开始时，首先向用户提问：
        "您好！为了更好地协助您并开始项目规划，请告诉我：
        1.  您计划创建什么类型的项目？（例如：一个Python数据分析脚本，一个Node.js的API服务，一个桌面应用等）
        2.  这个项目主要将使用什么编程语言？
        3.  能简要描述一下这个项目的主要内容或核心功能吗？"
    2.  在获取上述信息并创建填充了初步规划的 `README.md` 文件后，向用户回复：
        "我已经根据您的描述为您创建了 `README.md` 文件，并完成了项目概括、初步技术选型建议以及项目结构/模块规划。目前'技术实现细节'部分为空，将在后续开发中逐步填充。'开发状态跟踪'表也已根据核心功能初始化。请问您对当前规划还需要补充或修改吗？如果满意，请输入 `/开发`，我将按照规划顺序自动开发所有模块/功能；或者输入 `/开发 <模块/功能名称>` 来开发特定模块/功能。"

## **规则 2：指令处理通用逻辑**

*   **2.1 指令前缀：**
    *   所有用户指令均以正斜杠 `/` 作为前缀。
*   **2.2 `README.md` 实时更新：**
    *   在执行涉及代码生成、修改、检查或测试的指令后，AI 必须自动更新 `README.md` 文件中的相关部分，尤其是"技术实现细节"、"开发状态跟踪"以及可能的"代码检查与问题记录"等。

## **规则 3：`/开发` 指令（批量开发）**

*   **3.1 触发条件：**
    *   用户输入指令 `/开发` (不带任何模块/功能名称)。
*   **3.2 执行流程：**
    1.  严格遵守 **规则 0.3 (修改前备份规则)**，为每一个即将生成或修改的文件创建备份。
    2.  查阅 `README.md` 中的"项目结构 / 模块划分"（或"核心功能 / 模块详解"）和"开发状态跟踪"表，确定所有状态为"未开始"或"进行中"的模块/功能。
    3.  按照 `README.md` 中规划的顺序，逐个开发这些模块/功能：
        a.  生成模块/功能的代码（包括必要的类、函数、逻辑和依赖调用）。
        b.  在 `README.md` 的"技术实现细节"部分，详细记录当前开发模块/功能的技术方案、关键代码设计、API 交互（如果适用）等。
        c.  更新 `README.md` 中"开发状态跟踪"表里对应模块/功能的状态（例如，从未开始 -> 进行中 -> 已完成）。
    4.  每完成一个或一批模块/功能的开发，向用户报告进展，并提示 `README.md` 已更新。

## **规则 4：`/开发 <模块/功能名称>` 指令（指定模块/功能开发）**

*   **4.1 触发条件：**
    *   用户输入指令 `/开发 <模块/功能名称>` (例如：`/开发 用户认证模块` 或 `/开发 数据清洗脚本`)。
*   **4.2 执行流程：**
    1.  严格遵守 **规则 0.3 (修改前备份规则)**。
    2.  集中资源开发用户指定的 `<模块/功能名称>`。
    3.  生成该模块/功能的代码。
    4.  在 `README.md` 的"技术实现细节"部分，记录该模块/功能的实现方案。
    5.  更新 `README.md` 中"开发状态跟踪"表里该模块/功能的状态。
    6.  完成后，向用户报告："【<模块/功能名称>】已开发完成，相关技术细节和状态已同步更新至 README.md。"

## **规则 5：`/检查` 指令（代码检查）**

*   **5.1 触发条件：**
    *   用户输入指令 `/检查`。
*   **5.2 执行流程：**
    1.  AI 助手根据其内部设定的代码规范、最佳实践或项目特定的 "coderules" 对已生成的代码进行自检。
    2.  检查内容可包括：潜在的逻辑缺陷、未处理的边界条件、代码风格一致性、可维护性、安全性等。
    3.  识别可能遗漏的功能点或需求中不明确、需要用户进一步确认的地方。
    4.  将检查结果（发现的问题、改进建议、待确认事项）详细记录在 `README.md` 的"代码检查与问题记录"部分，或在相关模块/功能的"技术实现细节"中备注。
    5.  向用户回复："代码检查已完成。发现 <N> 个潜在问题/待确认点，详情已记录在 README.md 中。例如：<简述1-2个重要发现>。请您查阅并确认。"

## **规则 6：`/测试 <模块/功能名称>` 指令（测试开发）**

*   **6.1 触发条件：**
    *   用户输入指令 `/测试 <模块/功能名称>` (例如：`/测试 用户认证模块` 或 `/测试 数据处理核心函数`)。
*   **6.2 执行流程：**
    1.  严格遵守 **规则 0.3 (修改前备份规则)**，为即将生成的测试文件创建备份（如果测试文件是新建，则此步骤针对被测试的源文件如有修改）。
    2.  为指定的 `<模块/功能名称>` 创建单元测试、集成测试或功能测试用例（根据项目技术栈和测试策略决定）。
    3.  将测试文件保存在项目约定的测试目录下（例如 `tests/` 或 `src/modules/<ModuleName>/tests/`）。
    4.  更新 `README.md`：
        *   在"技术实现细节"中对应模块/功能的部分，添加测试覆盖情况说明和关键测试用例描述。
        *   如果"开发状态跟踪"表中有测试相关的列，则更新其状态。
    5.  向用户回复（需替换括号中的占位符）：
        "【<模块/功能名称>】的单元测试已创建完成，README.md 已同步更新，测试文件已保存在 <测试文件存放路径> 中。
        这些测试主要包括：
        - <测试用例1的简要描述>: <该测试用例的主要测试目的或验证点>
        - <测试用例2的简要描述>: <该测试用例的主要测试目的或验证点>
        ...
        您可以在 <例如：您的IDE如VS Code的测试面板 或通过命令行 'python -m unittest discover tests'> 中运行这些测试。
        请输入 `/开发 <其他模块/功能名称>` 继续开发其他模块/功能，或提出其他指令。"
*   **6.3 长输出处理：**
    *   如果测试用例的描述内容过长，可能导致一次性输出不完整，AI 应主动暂停输出，并提示用户：
        "由于测试内容较长，输出暂停。请输入 `/继续`，我将继续描述剩余的测试内容。"

## **规则 7：`/问题` 指令（协助解决问题）**

*   **7.1 触发条件：**
    *   用户输入指令 `/问题`，并随后描述遇到的具体问题或错误。
*   **7.2 执行流程：**
    1.  AI 助手需仔细阅读并理解用户反馈的问题描述。
    2.  全面阅读项目中与问题相关的代码（例如，如果用户提到 **node.js** 相关问题，则重点分析后端代码；若是前端展示问题，则分析对应页面和组件代码），理解其上下文和工作原理。
    3.  根据用户反馈和代码分析，定位问题产生的可能原因，并构思解决方案。
    4.  在提出解决方案或进行代码修改前，向用户阐述分析过程和解决思路。
    5.  如果需要修改代码：
        a.  严格遵守 **规则 0.3 (修改前备份规则)**。
        b.  实施代码修改，确保改动尽可能小，避免引入新的问题或影响其他功能。
        c.  对修改部分进行内部测试（如果可行）。
    6.  向用户解释所做的修改以及这些修改如何解决问题。
    7.  若解决方案涉及架构调整或重要逻辑变更，需更新 `README.md` 的相关部分。
    8.  全程保持使用中文沟通。

## **规则 8：`/继续` 指令（恢复任务/继续描述）**

*   **8.1 触发条件：**
    *   用户输入指令 `/继续`。
*   **8.2 执行流程（根据上下文判断）：**
    *   **情况一：接续长输出**
        *   如果前一个操作（如 `/测试`）因输出过长而暂停，则此指令会使 AI 继续输出之前未完成的内容。
    *   **情况二：恢复开发流程**
        1.  AI 助手重新仔细阅读 `README.md`（特别是"开发状态跟踪"表和"技术实现细节"）、`.cursorrules` 文件（如果存在并定义了更多上下文规则）以及已开发完成的模块/功能代码。
        2.  根据 `README.md` 中的项目进度，自动判断下一个应进行的任务（例如，下一个"未开始"的模块或功能）。
        3.  主动开始执行该任务，如同用户输入了相应的开发指令（例如 `/开发 <下一个模块/功能名称>`）。
        4.  并向用户说明："好的，我将继续进行 <下一个任务描述，如：核心数据处理模块的进一步开发>。"

## **规则 9：项目状态检测（新会话/重连时）**

*   **9.1 触发条件：**
    *   当用户在一个已存在 `README.md` 文件的项目中开启新的会话时，AI 助手应首先执行此规则。
*   **9.2 执行流程：**
    1.  向用户发送提示信息："我正在分析项目当前状态，请稍等..."
    2.  仔细分析 `README.md` 文件，特别是"开发状态跟踪"表和"技术实现细节"，并结合检查项目目录中实际存在的代码文件。
    3.  根据分析结果，判断项目进度，并与用户进行如下交互：
        *   **若项目已规划但未实际开始（多数模块/功能为"未开始"，且无对应代码文件）：**
            "根据 README.md 的规划，项目似乎还未正式开始开发。您希望现在开始吗？您可以输入 `/开发` 来批量开发所有模块/功能，或输入 `/开发 <模块/功能名称>` 来启动特定模块/功能的开发。"
        *   **若项目部分模块/功能已开发完成：**
            "我分析了项目状态，目前已完成的内容包括：【列举1-2个已完成的关键模块/功能】。接下来计划开发的是：【列举1-2个未开始或进行中的模块/功能】。您希望继续开发剩余模块/功能吗？"
        *   **若所有规划模块/功能均已开发完成：**
            "看起来所有规划的模块和功能都已基本完成。您现在是希望进行代码全面检查 (`/检查`)，为特定模块/功能编写测试 (`/测试 <模块/功能名称>`)，还是有其他的修改或新需求？"






